/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data, preventing unauthorized access to other users'
 * information. All write operations are protected by authorization checks,
 * while read operations follow a similar principle of user-based access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointments for a specific user.
 *
 * Key Security Decisions:
 * - Users can only list appointments under their own user ID.
 * - No public listing of user profiles is allowed.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the `userId` present in the path to authorize access to
 *  user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get) Authenticated user can read their own profile.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth UID.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth UID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes and restricts listing of users.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the resource
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the resource and it exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile if the userId matches their auth UID
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to get their own profile
      allow get: if isOwner(userId);

      // Allow the user to update their own profile if the userId matches their auth UID and the resource exists
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile if the userId matches their auth UID and the resource exists
      allow delete: if isExistingOwner(userId);

      // Listing all users is not allowed
      allow list: if false;
    }

    /**
     * @description Controls access to appointment documents within a user's profile.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) Authenticated user can create an appointment under their own profile.
     * @allow (get) Authenticated user can read an appointment under their own profile.
     * @allow (update) Authenticated user can update an appointment under their own profile.
     * @allow (delete) Authenticated user can delete an appointment under their own profile.
     * @allow (list) Authenticated user can list appointments under their own profile.
     * @deny Non-owner cannot access these documents.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner and the resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create an appointment under their own profile
      allow create: if isOwner(userId);

      // Allow the user to get an appointment under their own profile
      allow get: if isOwner(userId);

      // Allow the user to update an appointment under their own profile if the resource exists
      allow update: if isExistingOwner(userId);

      // Allow the user to delete an appointment under their own profile if the resource exists
      allow delete: if isExistingOwner(userId);

      // Allow the user to list appointments under their own profile
      allow list: if isOwner(userId);
    }
  }
}
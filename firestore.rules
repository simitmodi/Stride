/**
 * @fileoverview Firestore Security Rules for the Stride banking appointment platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Customers and Banks can only
 * access their own profile data and their own appointments. Data is segregated by
 * customer and bank IDs in both top-level collections and subcollections.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profile information.
 * - /banks/{bankId}: Stores bank profile information.
 * - /customers/{customerId}/appointments/{appointmentId}: Stores appointments for a specific customer.
 * - /banks/{bankId}/appointments/{appointmentId}: Stores appointments for a specific bank.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - All write operations are strictly validated against the authenticated user's ID.
 * - The `id` field within Customer and Bank documents must match the document ID in the path,
 *   ensuring that users can only create/modify their own documents.  Updates will also
 *   validate that this `id` field is immutable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to customer profile documents. Only the customer themselves can read/write their own profile.
     * @path /customers/{customerId}
     * @allow (create) - Authenticated user creates their own profile with matching customerId.
     *   request.auth.uid == "user123" and request.resource.data.id == "user123"
     * @allow (get, list) - Authenticated user reads their own profile.
     *   request.auth.uid == "user123" and path is /customers/user123
     * @allow (update, delete) - Authenticated user updates their own profile with matching customerId.
     *   request.auth.uid == "user123" and resource.data.id == "user123"
     * @deny (create) - Authenticated user attempts to create a profile for another user.
     *   request.auth.uid == "user123" and request.resource.data.id == "user456"
     * @deny (get, list) - Authenticated user attempts to read another user's profile.
     *   request.auth.uid == "user123" and path is /customers/user456
     * @deny (update, delete) - Authenticated user attempts to update another user's profile.
     *   request.auth.uid == "user123" and resource.data.id == "user456"
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /customers/{customerId} {
      // Helper function to check if the authenticated user is the owner of the customer profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the customer profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false; // Listing customers is not permitted.
      allow create: if isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to bank profile documents. Only the bank itself can read/write its own profile.
     * @path /banks/{bankId}
     * @allow (create) - Authenticated user creates their own bank profile with matching bankId.
     *   request.auth.uid == "bank123" and request.resource.data.id == "bank123"
     * @allow (get, list) - Authenticated user reads their own bank profile.
     *   request.auth.uid == "bank123" and path is /banks/bank123
     * @allow (update, delete) - Authenticated user updates their own bank profile with matching bankId.
     *   request.auth.uid == "bank123" and resource.data.id == "bank123"
     * @deny (create) - Authenticated user attempts to create a bank profile for another bank.
     *   request.auth.uid == "bank123" and request.resource.data.id == "bank456"
     * @deny (get, list) - Authenticated user attempts to read another bank's profile.
     *   request.auth.uid == "bank123" and path is /banks/bank456
     * @deny (update, delete) - Authenticated user attempts to update another bank's profile.
     *   request.auth.uid == "bank123" and resource.data.id == "bank456"
     * @principle Enforces document ownership for writes and restricts access to a bank's own data tree.
     */
    match /banks/{bankId} {
      // Helper function to check if the authenticated user is the owner of the bank profile.
      function isOwner(bankId) {
        return request.auth.uid == bankId;
      }

      // Helper function to check if the authenticated user is the existing owner of the bank profile.
      function isExistingOwner(bankId) {
        return isOwner(bankId) && resource != null;
      }

      allow get: if isOwner(bankId);
      allow list: if false; // Listing banks is not permitted.
      allow create: if isOwner(bankId) && request.resource.data.id == bankId;
      allow update: if isExistingOwner(bankId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(bankId);
    }

    /**
     * @description Controls access to appointment documents associated with a customer. Only the customer themselves can read/write their own appointments.
     * @path /customers/{customerId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user creates an appointment under their customer ID.
     *   request.auth.uid == "user123" and path is /customers/user123/appointments/appt1
     * @allow (get, list) - Authenticated user reads their own appointments.
     *   request.auth.uid == "user123" and path is /customers/user123/appointments/appt1
     * @allow (update, delete) - Authenticated user updates their own appointment under their customer ID.
     *   request.auth.uid == "user123" and path is /customers/user123/appointments/appt1
     * @deny (create) - Authenticated user attempts to create an appointment under another user's ID.
     *   request.auth.uid == "user123" and path is /customers/user456/appointments/appt1
     * @deny (get, list) - Authenticated user attempts to read another user's appointments.
     *   request.auth.uid == "user123" and path is /customers/user456/appointments/appt1
     * @deny (update, delete) - Authenticated user attempts to update another user's appointment.
     *   request.auth.uid == "user123" and path is /customers/user456/appointments/appt1
     * @principle Enforces document ownership for writes and restricts access to a user's own appointments.
     */
    match /customers/{customerId}/appointments/{appointmentId} {
      // Helper function to check if the authenticated user is the owner of the customer appointment.
      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      // Helper function to check if the authenticated user is the existing owner of the customer appointment.
      function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId) ;
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to appointment documents associated with a bank. Only the bank itself can read/write its own appointments.
     * @path /banks/{bankId}/appointments/{appointmentId}
     * @allow (create) - Authenticated bank user creates an appointment under their bank ID.
     *   request.auth.uid == "bank123" and path is /banks/bank123/appointments/appt1
     * @allow (get, list) - Authenticated bank user reads their own appointments.
     *   request.auth.uid == "bank123" and path is /banks/bank123/appointments/appt1
     * @allow (update, delete) - Authenticated bank user updates their own appointment under their bank ID.
     *   request.auth.uid == "bank123" and path is /banks/bank123/appointments/appt1
     * @deny (create) - Authenticated bank user attempts to create an appointment under another bank's ID.
     *   request.auth.uid == "bank123" and path is /banks/bank456/appointments/appt1
     * @deny (get, list) - Authenticated bank user attempts to read another bank's appointments.
     *   request.auth.uid == "bank123" and path is /banks/bank456/appointments/appt1
     * @deny (update, delete) - Authenticated bank user attempts to update another bank's appointment.
     *   request.auth.uid == "bank123" and path is /banks/bank456/appointments/appt1
     * @principle Enforces document ownership for writes and restricts access to a bank's own appointments.
     */
    match /banks/{bankId}/appointments/{appointmentId} {
      // Helper function to check if the authenticated user is the owner of the bank appointment.
      function isOwner(bankId) {
        return request.auth.uid == bankId;
      }

      // Helper function to check if the authenticated user is the existing owner of the bank appointment.
      function isExistingOwner(bankId) {
        return isOwner(bankId) && resource != null;
      }

      allow get: if isOwner(bankId);
      allow list: if isOwner(bankId);
      allow create: if isOwner(bankId);
      allow update: if isExistingOwner(bankId);
      allow delete: if isExistingOwner(bankId);
    }
  }
}